{
  "name": "Canada Day",
  "id": "SoioxDodWZzMScSpz",
  "sources": {
    "main": "/*Canada Day\n\nuses step (hue_increment) to set length of red/white segments\nuses min_brightness to control direction and fading. <3 or 5 to 7 reverse, < 5 fade red/white\nSaturation fades between red (1) and white (0)\n*/\n\nvar PATHLIGHT_LED = 1223  //first LED that covers the path ( this is the fence post - up to 12 before this is the actual path)\n\nexport var max_brightness = 1\nexport var fps = 1\nexport var hue_increment = 1\nexport var min_brightness = 0\nexport var saturation = 1\nexport var pathlight = 0\nexport var hue = 0\nexport var timing = 0 //not used\nexport var fade = 0.3 //amount to fade up/down per cycle (0.3 is about 3 pixels)\n\nexport function sliderStep(v) {\n    hue_increment = clamp(v, 0.01, 1)\n}\n\nexport function sliderSpeed(v) {\n    fps = clamp(v, 0.01, 1)\n}\n\nexport function sliderMaxBrightness(v) {\n    max_brightness = clamp(v, min_brightness, 1)\n}\n\nexport function sliderMinBrightness(v) {\n    min_brightness = clamp(v, 0, max_brightness)\n}\n\nexport function sliderPathlight(v) {\n    pathlight = v\n}\n\n\nexport function beforeRender(delta) {\n  t1 = time(0.01 / fps)\n}\n\nexport var v =0\nexport var num_sections = 0\n\nexport function render(index) {\n  pos = index/pixelCount  //counts from 0-1 with index\n  hue_increment = clamp(hue_increment, 0.01, 1)\n  num_sections = pixelCount/(hue_increment*200) //num_sections is the pixelCount/length of red+white sections\n  fade =1/(pixelCount/num_sections/6) //6 is the fraction of pixels to fade 6=1/3 of the pixels of a specific colour \n                                      //(ie 1/(2*3) of each colour), so 36 white pixels would fade up/down in 12 pixels.\n  direction = 1\n  //direction\n  if (min_brightness*100 < 5) {direction = -1}\n  v = (1 + pos * num_sections + t1*direction) % 1 //v ramping up/down from 0-1 to create sections\n  //fade up/down\n  if (min_brightness*100 < 3 || min_brightness*100 > 7) {\n    if (v>0.5) {saturation = clamp(saturation + fade, 0,1)}\n    else {saturation = clamp(saturation - fade, 0,1)}\n  }\n  //sharp transition 0.5 is 50% white, 50% red\n  else {saturation = v<0.5}\n\n  if (pathlight > 0 && index >= PATHLIGHT_LED) {\n    saturation = 0\n    max_brightness = pathlight\n  } \n  // 0 is red\n  hsv(0, saturation, max_brightness*max_brightness*max_brightness) \n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCACWAGQDASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAAAAAAAAAAAcIAwQGBQIB/8QARRAAAQMBBQIKBAoJBQAAAAAAAQACAwQFBgcREhNxFCExMkFRYbHB0QgicoEWI0JSYoKRodLhFRczNFNzg7LCQ0RFY5L/xAAbAQABBQEBAAAAAAAAAAAAAAAAAgMEBQYBB//EADgRAAECBAMEBwUIAwAAAAAAAAABAgMEBREhMUESFJGhBhMyUZLB4RUWUqKxM0JhcYGC0fBisvH/2gAMAwEAAhEDEQA/AIYbQ0kXJFG3eF9t4O3iGyG7JQlVYu2vMPi44o/azd5LzZ8SLbnaRto2E9LWeear1nIaZIa9vR2cf23In6lhGlvQR7l9KtT742zIc3Vz8+xrR4LAbyWsXF36Tq2k/NmcB9xSN+b8I+nReNrFTgpZxfJY13K0HeFW2C+du04yZatV9aQu71u0+JF4YDx2jJKOqT8sl1J1mqKNu6MTKdmIi8SwL6OB/OiYfcoE9KKlipjdoxRtYXcJzy6f2SzRYs29GRnJE8dIId5rh8Xr5VV7W2QKmNrDT7bItOeerRn/AGp6HMQ4jtlMyum6NNycFYsRUVqZ2X8bEdIiKYZ4IiIAIiIAuJZ+GsFBE2NtVI5rQBx5eS3vgDZj8jNDHOR0yRNd3hadVihYkDSRWB3sDUfuXmS4wWazMskkf2bI/koW1AbhgaRIVWjLtWdwsdH+r+wiPWs6nO6Jo7gvh+HN3ZBkbMiHa3Mdy5F+NsQ5lHIfaaPxLC/HJ7T6llNePpS6fApPWy2tuA+lPrOiu8VvM6h2E12jyUUg3Tv81ifhDd53NhlZ/VcfFeHDjlAWja2XI09IZICtynxssuUkSUdRD2uIPcubcqvdwFLL1xmr/FfzMtRgxY8gyjlniPW12ffmoex1uRBc02JsJ5JhU7fPaEcWnZ9QHzlNUOL1hyuDS97CfnNOX25KJfSLvNQ3jF3jRTNl2PCNek55Z7LLuKdhpA2kVlrkKaiVRIKsmdrY1v8An/JDKIilmfCIiACIiALBUGGlXPC0z09THIQMw1zcgVuswdq5SSKmSNvQHQgn7dQUyPqGR8ufuWu61YGc4uHuUDdYSZmqWvTzluzDn9SKBgnWOHFXtHtQ5f5L4kwStJo9Sup3HqLSFK7rfoGHJ1QG7wfJYnXpshhyfaNOzo9d4HejdoH9UErVU0x/b6EROwZt8fLozulP4VhkwhvCz5FO72ZPyU0xW7Z0wzjrqd+6ULO2vpX82piO54XN0grkov3gqDe01OCkBVGGd4oCBwHaDrZI3xIXA4k2BaFhGzhXUzqfa7TRm4HPLTnyHtCt+KiJ3JKw7nBQN6U7g74MZEH965P6KXDlWQ3o9FI83XJibgOl4jURFtjjot+8gRERTTNBERABERAE2G0Lx2jBrFTUPYRnmx4afu41qmnt+YccVpSA/RkKn2nujZVM0NjpGNA6AAFux2PRxDJtOwe5Ve5uXNxuV6RQmfZwUt+Vitcli2kCS+gqgTxkuhd5LXmoqinGcsEsY63sIVom0kLObEwe5fRgjdyxtO9oXNx/yFJ0pcmcLn6FVVlhqpqf9lNJF7DiFaJ1DTO5aeI72BYJLEs+XnUcDt7AubiqZOHfehi4Og8/QrdBb1pU7tUddUA9shI+wrmMRLZrbWFnirqHT7PaaNWXFnpz7grVy3KsKZxc6y6UuPKdk3PuUG+kld+gsI3dNDTR0+14Rr2bQM8tllybynYMu+G9HK7AgVCsSs5LOhMhWctscO9FIUREViY4IiIAIiIAs7U40te07OzyXdAcch3leZLjBWuz0UMcZ7JHLoaHCYxQNjn2EpAyLjGAT963YcIbLA+MhYT/ADJPxKq2Zl2pvEj0SDhsX4/yhwr8WLcLjpMTB0D1z/ksbsVrwnm1LGbmZ9+akP8AU/YbuVj2+zI7xKwzYK2LIQWVFXF2Ne094KSsGZ+LmOtqNF1hfKcQzF68TBxywO9qL81twY0Wwxo2sEEh62jT5rpXYIWX8mvq/fp8lgkwPpfkWjMPaaPJHVzSa8xSzdCfmxPCvkedT43VWr46gbp62PzP2ZKOccL7svkLE0wOhNNt89WXHq2fb9FSTLgdOHHZ2o3T0Aw8f9yi7GW5E9zTZG2qGz8I22nS3Tlp0dp+cnoO8I9EiZFbUEpDpZzpXt4Wz70vn+BGqIisTHBERABERAF36m9dm0zS51bA0DlLnZBebJiPY8X++pn+zIodprl1tXTtewOZIQDokjcMvf8AktyLDK15hmHU43l/4VVbxGXJpu0o1Oh4RI3kSTJi7YkTy0yasulocf8AFYzjJYYIBE57WsKj/wDVRbp5rIH7nnxCwT4X3khOQs/a9rJG+JCSseZ+HkPNplGXDrfmQk1mL93Xc6aZu+ElbcGJ93agZtrtI+m3T3qIHYc3kYOOypfc5p8VryXIt6IEusuo9zc+5G8x0zbyUUtGpT+xG+ZpOtNfexKs5RWhC89QcFC/pOWjTWgLtGnlbLp4Tnp6P2S8Y3etVvLZlYN8D/JchfyiqKPgPCKeWDVry2jC3Pm9aegzL4j0a5pW1Ciy8rLujwot7Www1VEOUREViY4IiIAIiIAvkWwRDmtb9VfnC4G/6jW7+JQTPiReOSLW5+iM/LDDl9pK8qS+9uS860pT7gPBVyzrEyQ2TOjUw7tPTj6FjBW055J4/wD2F9iaN3JI07iFWSW8FpzOLn2hUkn/ALXAfZmsDrTrHnN1XOT1mQ+aRvyfCSU6Lu1i8i0gIPIc1+qrzbatBnNrqlu6Z3mtuG99swNAZaM/F852Z+9dSebq0bd0Xi/dipwUsoY2O5Wg7woC9KaJkZuyWtDc+FZ5DL+EtWnxFt+nP786Tse0eGS43FO9doXmFliue1+w2ujSCOdoz6ewJ6HNMiORqJiVk5Q5iSgujPcitS2V9VscEiIppmwiIgAiIgC59Fh7Z1FG1jC/SBkBqK9OG7VJEMvXI7SuTnxfsfI6HSnc0jwXmTY0U4JEVPU7zpULrYDclQ0u41WPi5HfqSH8HrPPOpY3+00FYJLnWFK4ufZFG5x5SYW59yjabGuqD/iqQub1veB3NWMY22iD+4wEdRcfJJWZga/QdbRqqmKYfu9SSHXEu+7/AIilG6MBa8uHF3pQR+jY2+zxLhWY5VY51lwu3SkeC3IccYy0bWzXNPSGPz70ddLL/wAO+zqyzJV8XqdA/CO7p5tM9v8AVefFQ16QVz6G6hsHgTXNFRwjVqcTzdnlyn6RUp02NVmyj42mmh3jPuzUV+kBfGhvaLA4Hqzp+Eaw4Ec7Z5co+iU5DWArk2LXIk2yqshOSZ2tjW63TPDmRCiIpZnwiIgAiIgCyFLhNVTRME8bo3gesY38RPvC9CLBmJ7fWkqGn+Y38Kk6W0IYvlsP1wtWS8NJDz5Gjc4eag7tBTM061moROypH5wRicOKvlYe0B3ktc4FzdFsRnfTn8S7ya/VjUzgJqyOIn5z2+a+G4h3eccv0nCN7lxYMvr9RxtRrFrtv4UXyOCfgdVjm2pC7fER4rVnwUtZjfiqqmkPU7NvmpMbfq77hxWvSDfIAt2O8VmTDNldA4djwjd5dcvqd9sVaH2k4t9CGn4PW+zppnbnu/Co7xVunX3XNmCuaxu32ujQSeTRn0doVsWWjSv5tREfrhQT6UsrJfgxoe1+XCuac/4SXDlobHI5pEm6zNzUF0CKiWW2nctyBkRFMM8EREAEREAStNaNdnk+sndmAeOVx5RmtQkuJJOZPGSURZVVue8NaiJgh+IiLgsIiIAzQ1tRTjKKeWMdTHkLmr91lRVihE88kwbr07R5dlzeTNEUyVVeub/dDPV1rfZ8VbY4f7IcoiIr88lCIiACIiAP/9k="
}